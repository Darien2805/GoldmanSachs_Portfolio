/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/user/updatepassword": {
    /**
     * Update user password
     * @description Updates a user's password. If you are looking for the endpoint to update the password after a password reset request is sent, check the authentication controller docs.
     */
    post: operations["updatePassword"];
  };
  "/api/auth/signup": {
    /**
     * Register new user
     * @description Registers a new user with the provided signup credentials. If the user is successfully registered, a verification email is sent to the user. The user must verify their email before they can login. Remember to check that your password meets the required password requirements (between 8-25 characters, has at least a symbol, a numeric character, and an upper and lowercase letter).
     */
    post: operations["registerUser"];
  };
  "/api/auth/signin": {
    /**
     * Sign in to the website
     * @description Authenticates a user with the provided login credentials and returns a JWT token upon successful authentication.
     */
    post: operations["authenticateUser"];
  };
  "/api/auth/saveforgottenpassword": {
    /**
     * Update forgotten password
     * @description This method is used to save the new password for a user who has forgotten their password. The user is not required to be logged in.
     */
    post: operations["savePassword"];
  };
  "/api/auth/refresh": {
    /**
     * Get new access token upon expiration
     * @description This endpoint is used to refresh a user's JWT token. The user must be logged in to use this endpoint. The user must also have a valid refresh token. If the user does not have a valid refresh token, they must log in again. If the user has a valid refresh token, a new JWT token is generated and returned to the user. The user's refresh token is also updated in the database. The user must use the new JWT token for all future requests. The old JWT token will no longer be valid.
     */
    post: operations["refreshToken"];
  };
  "/api/auth/resendregistrationtoken": {
    /**
     * Resend registration token
     * @description Resends a user's registration token. This is useful if the user did not receive the initial registration token.
     */
    get: operations["resendRegistrationToken"];
  };
  "/api/auth/forgotpassword": {
    /**
     * Forgot password
     * @description This method is used to send a password reset email to the user. The user is not required to be logged in.
     */
    get: operations["forgotPassword"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UpdatePasswordRequest: {
      oldPassword: string;
      newPassword: string;
    };
    MessageResponse: {
      message: string;
    };
    ErrorResponse: {
      error: string;
    };
    SignupRequest: {
      firstName: string;
      lastName: string;
      userName: string;
      email: string;
      password: string;
    };
    JwtResponse: {
      accessToken: string;
      type: string;
      id: string;
      firstName: string;
      email: string;
      roles: string[];
      refreshToken: string;
    };
    LoginRequest: {
      email: string;
      password: string;
    };
    ResetPasswordRequest: {
      token: string;
      newPassword: string;
    };
    TokenRefreshRequest: {
      refreshToken: string;
    };
    TokenRefreshResponse: {
      accessToken: string;
      refreshToken: string;
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Update user password
   * @description Updates a user's password. If you are looking for the endpoint to update the password after a password reset request is sent, check the authentication controller docs.
   */
  updatePassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePasswordRequest"];
      };
    };
    responses: {
      /** @description Successfully changed password. */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      /** @description Invalid old password. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Register new user
   * @description Registers a new user with the provided signup credentials. If the user is successfully registered, a verification email is sent to the user. The user must verify their email before they can login. Remember to check that your password meets the required password requirements (between 8-25 characters, has at least a symbol, a numeric character, and an upper and lowercase letter).
   */
  registerUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignupRequest"];
      };
    };
    responses: {
      /** @description Successful registration */
      200: {
        content: {
          "application/json": components["schemas"]["JwtResponse"];
        };
      };
      /** @description Bad request, check the error message. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Error in Java mail configuration. */
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Sign in to the website
   * @description Authenticates a user with the provided login credentials and returns a JWT token upon successful authentication.
   */
  authenticateUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description Successful sign in */
      200: {
        content: {
          "application/json": components["schemas"]["JwtResponse"];
        };
      };
    };
  };
  /**
   * Update forgotten password
   * @description This method is used to save the new password for a user who has forgotten their password. The user is not required to be logged in.
   */
  savePassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordRequest"];
      };
    };
    responses: {
      /** @description Password successfully reset. */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      /** @description Bad request, check the error message. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Get new access token upon expiration
   * @description This endpoint is used to refresh a user's JWT token. The user must be logged in to use this endpoint. The user must also have a valid refresh token. If the user does not have a valid refresh token, they must log in again. If the user has a valid refresh token, a new JWT token is generated and returned to the user. The user's refresh token is also updated in the database. The user must use the new JWT token for all future requests. The old JWT token will no longer be valid.
   */
  refreshToken: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TokenRefreshRequest"];
      };
    };
    responses: {
      /** @description Successful refresh. */
      200: {
        content: {
          "application/json": components["schemas"]["TokenRefreshResponse"];
        };
      };
      /** @description Bad request, check the error message. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Resend registration token
   * @description Resends a user's registration token. This is useful if the user did not receive the initial registration token.
   */
  resendRegistrationToken: {
    parameters: {
      query: {
        token: string;
      };
    };
    responses: {
      /** @description Re-sent registration token. */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      /** @description Invalid token. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Forgot password
   * @description This method is used to send a password reset email to the user. The user is not required to be logged in.
   */
  forgotPassword: {
    parameters: {
      query: {
        email: string;
      };
    };
    responses: {
      /** @description Send password recovery email. */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
    };
  };
}
